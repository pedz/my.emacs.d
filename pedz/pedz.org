#+PROPERTY: header-args:emacs-lisp :comments link :tangle yes

* Small tweaks

Emacs disables a few commands so that new users do not get hopelessly
lost.  I enable the ones that I use frequently.  Also, the default for
~C-h a~ is [[elisp:(describe-function 'apropos-command)][apropos-command]].  I move this to ~C-h A~ and bind ~C-h a~
to [[elisp:(describe-function 'apropos)][apropos]].

#+begin_src emacs-lisp
  (put 'downcase-region  'disabled nil)
  (put 'eval-expression  'disabled nil)
  (put 'narrow-to-page   'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (put 'upcase-region    'disabled nil)

  (define-key help-map (kbd "A") 'apropos-command)
  (define-key help-map (kbd "a") 'apropos)
#+end_src

* minibuffer keymap modifications

Currently this code is not included in the tangle output.  It makes
the minibuffer act more like a Unix TTY with ~C-w~ killing a word and
~C-u~ killing the line typed thus far.  I got away from this I believe
when I started using helm but I honestly don't remember.

#+begin_src emacs-lisp :tangle no
  (defun pedz/backward-kill-line ()
    "Kills the line from point back to the beginning of the line"
    (interactive)
    (kill-line 0))

  ;; setup minibuffer maps to have BSD style TTY line editing
  ;; Removed while playing with Helm
  (dolist (tmap (list
                 minibuffer-local-completion-map
                 minibuffer-local-filename-completion-map
                 minibuffer-local-isearch-map
                 minibuffer-local-map
                 minibuffer-local-must-match-map
                 minibuffer-local-ns-map
                 minibuffer-local-shell-command-map))
    (define-key tmap "\C-w" 'backward-kill-word)
    (define-key tmap "\C-u" 'pedz/backward-kill-line))
#+end_src

* Personal keymap

Before ~C-\~ was bound to [[elisp:(describe-function 'toggle-input-method)][toggle-input-method]], I stole the (then
unused) key and added my own personal keymap.  Also, whenever I hit
~toggle-input-method~, it totally frustrates me so I have left my key
arrangement.

The personal keymap is bound (as I said) to ~C-\~ and from there I
bound keys to functions that I've use frequently.

One note: I dislike ~toggle-input-method~ so much that I found all the
keymaps it was bound on and removed it.

#+begin_src emacs-lisp
  (defun pedz/toggle-buffer-case-fold-search ()
    "Toggles the case fold search flag for the local buffer"
    (interactive)
    (message "case-fold-search is now %s"
             (prin1-to-string (setq case-fold-search (not case-fold-search)))))

  (defun pedz/list-all-matching-lines (regexp &optional nlines)
    (interactive "sList lines matching regexp: \nP")
    (let ((here (point)))
      (goto-char (point-min))
      (occur regexp nlines)
      (goto-char here)))

  (defun pedz/recenter-top ()
    "Redraw page with the current line at the top of the page"
    (interactive)
    (recenter 0))

  (defun pedz/recenter ()
    "Redraw page with the current line in the middle of the page"
    (interactive)
    (recenter nil))

  (defun pedz/recenter-bottom ()
    "Redraw page with the current line at the top of the page"
    (interactive)
    (recenter -1))

  ;;
  ;; My own keymap of key bindings is in this map and I hook the map to
  ;; \C-\\ for now
  ;;
  (defvar pedz/personal-map (make-sparse-keymap)
    "Keymap for all personal key bindings")
  (define-key pedz/personal-map (kbd "C-b") #'pedz/recenter-bottom)
  (define-key pedz/personal-map (kbd "C-c") #'pedz/toggle-buffer-case-fold-search)
  (define-key pedz/personal-map (kbd "C-f") #'auto-fill-mode)
  (define-key pedz/personal-map (kbd "C-g") #'goto-line)
  (define-key pedz/personal-map (kbd "C-k") #'compile)
  (define-key pedz/personal-map (kbd "C-p") #'insert-current-pmr)
  (define-key pedz/personal-map (kbd "C-t") #'pedz/recenter-top)
  (define-key pedz/personal-map (kbd "C-v") #'view-file)
  (define-key pedz/personal-map (kbd "C-w") #'compare-windows)
  (define-key pedz/personal-map (kbd "W")   #'whitespace-cleanup)
  (define-key pedz/personal-map (kbd "b")   #'bury-buffer)
  (define-key pedz/personal-map (kbd "l")   #'pedz/list-all-matching-lines)
  (define-key pedz/personal-map (kbd "t")   #'pedz/recenter-top)
  (define-key pedz/personal-map (kbd "w")   #'compare-windows)

  (define-key global-map (kbd "C-\\") pedz/personal-map)
  (define-key global-map (kbd "C-x C-b") #'electric-buffer-list)
  (define-key isearch-mode-map (kbd "C-\\") nil)
#+end_src

* Server start

I keep putting this in and taking it out.  Lets put it back in for
now.

#+begin_src emacs-lisp
  (server-start)
#+end_src

* Removed X11 server setup

The comment says that I removed this April of 2022.  Right now, I
don't recall what it does for sure but I think it resized the frame
upon initial start up.  I now have better stuff for that in
resize.el but I've not tried it for X11 'cause I don't use X11
anywhere.

#+begin_src emacs-lisp :tangle no
  (declare-function setup-x "x-stuff" ())
  (defun pedz-frame-hook ()
    (interactive)
    (if (or (eq window-system 'x)
            (eq window-system 'ns))
        (progn
          (require 'x-stuff)
          (setup-x))))
  (add-hook 'server-after-make-frame-hook #'pedz-frame-hook)
#+end_src

* Removed remapping of

This is no longer needed / wanted.  I use to have the meta key the
same as the command key next to the space bar.  But that was
inconsistent with how the Terminal worked and that affected me using
zsh.  So now I have meta as Option which is more normal.  Note that
for a Windows style keyboards, I still need to go into Apple => System
Preferences => Keyboard => Modifier Keys... and rearrange the
"Windows" key but I don't need to do anything for an Apple keyboard
such as one on a Mac laptop.

What this did was hooked hide and hide others back up to the command-h
and shift-command-h keys.

#+begin_src emacs-lisp :tangle no
  (if (eq window-system 'ns)
      (progn
        (define-key global-map [?\M-h] 'ns-do-hide-emacs)
        (define-key global-map [?\M-\s-h] 'ns-do-hide-others)))
#+end_src

* Enable displaying the time in the mode lines

#+begin_src emacs-lisp
  (display-time)
#+end_src

* Unix find

Again -- not used anymore.  This was an interesting programming
exercise for me in lisp.  It uses true tail recursion so the lisp
interpreter should be happy with it.  As the big comment days, it
tries to re-implement the Unix find command but I've discovered that
Helm and other tools work better.  Plus, zsh's ~**~ pattern is so fast
that I rarely need to use find.

#+begin_src emacs-lisp :tangle no
  (defun unix-find ( dir &optional filter dont-add-self)
    "Acts similar to the unix find command.  Starting from DIR,
      recursively descends the file system calling FILTER.  Returns a list
      of file entries like directory-files-and-attributes returns.  FILTER
      is called with each file entry.  If it returns true, the file entry
      is added to the list that is returned.  This is a recursive
      function.  A third argument, if false, tests and adds DIR to the
      result list. FILTER defaults to t (return all files)"
    ;; Copyright Perry Smith, 2007
    ;; Aug 19, 2007

    ;; Default filter is to return everything
    (unless filter
      (setq filter (function (lambda (file) t))))
  
    ;; Set result to dir plus its attributes if appropriate
    (let* ((temp-file (unless dont-add-self
                        (cons dir (file-attributes dir))))
           (result (unless (or dont-add-self
                               (not (funcall filter temp-file)))
                     (list temp-file))))

      ;; For each file in the directory, we call the lambda function
      (mapc
       (function (lambda (file)
                   ;; pick out file-name and is-dir.  Create full-name
                   ;; which is "dir/file-name"
                   (let* ((file-name (nth 0 file))
                          (full-name (concat dir "/" file-name))
                          (is-dir (nth 1 file)))

                     ;; for . and .. we do nothing
                     (unless (or (string-equal file-name ".")
                                 (string-equal file-name ".."))

                       ;; call filter to see if file should be added to
                       ;; the result list.  We add a modified version of
                       ;; file by changing the file name to be the full
                       ;; path relative to the origin.
                       (if (funcall filter file)
                           (setq result (cons (cons full-name 
                                                    (cdr file))
                                              result)))

                       ;; If file is a directory, recursively call
                       ;; ourselves.  We pass t as the third argument
                       ;; because we have already added this file to the
                       ;; result list.  We append what the recursive
                       ;; calls returns with the results we have so far.
                       (if is-dir
                           (setq result (append result
                                                (unix-find full-name filter t))))))))
       (directory-files-and-attributes dir nil nil t))
      ;; return the result
      result))
#+end_src

* grep files alias for Rails files

This one might get reused.  It creates an alias that can be used when
grep is used to filter the source files for Rails: Ruby files, ERB
templates, javascript files, CSS files and SASS files.  It is removed
because I quit working on Rails but since I am back at working on
Rails, this might be useful -- although, if I'm sitting at the top of
a Rails directory structure, I don't see it omitting a high percentage
of files so what's the point?

#+begin_src emacs-lisp :tangle no
  (eval-when-compile (defvar grep-files-aliases))
  (eval-after-load 'grep
    '(add-to-list 'grep-files-aliases (cons "rails" "*.rb *.erb *.js *.css *.scss")))
#+end_src

* Quicker point to register / register to point key bindings

I have [[elisp:(describe-function 'point-to-register)][point-to-register]] and [[elisp:(describe-function 'jump-to-register)][jump-to-register]] bound to ~C-x /~ and
~C-x j~ respectively.  I'm not sure where / how I came to this but I
have had it like this forever as far as I can recall.

#+begin_src emacs-lisp
  (define-key global-map (kbd "C-x /") 'point-to-register)
  (define-key global-map (kbd "C-x j") 'jump-to-register)
#+end_src

* Arrow keys to move between windows

You can set things up so that the arrow keys move between windows
within a frame.  I never go use to these and so they are not active
currently.  I'm also trying to use tabs now instead of multiple
windows.

#+begin_src emacs-lisp :tangle no
  (windmove-default-keybindings)
#+end_src

* Tab bar mode

There are [[info:emacs#Tab Bars][Tab Bars]] which are tabs per frame and  [[info:emacs#Tab Line][Tab Lines]] which are
tabs per window.  I'm trying to use tab bars and have connected ~s-{~
and ~s-}~ to work which is the same keys that Safari uses to move
between tabs (a.k.a ~command-{~ and ~command-}~).

#+begin_src emacs-lisp
  (tab-bar-mode +1)
  (global-set-key (kbd "s-}") #'tab-next)
  (global-set-key (kbd "s-{") #'tab-previous)
#+end_src

* Snapper hooks

I'm keeping this here just because it creates a tear in my eye.
[[https://github.com/pedz/Snapper][Snapper]] is a program I wrote to help analyze =IBM AIX snaps=.
Glorious days.  But... long past.

Anyhow, it would put out colored lines so I hooked this up so that I
could see the colors within Emacs.

#+begin_src emacs-lisp :tangle no
  (defun display-ansi-colors ()
    (interactive)
    (require 'ansi-color)
    (ansi-color-apply-on-region (point-min) (point-max)))
#+end_src

* Doxymacs rigging

[[https://doxymacs.sourceforge.net][Doxymacs]] appears to be an integration of Doxegen and Emacs but I don't
think I've used this since the SATA project back in 2006.

#+begin_src emacs-lisp :tangle no
  (if (file-directory-p "/usr/local/share/emacs/site-lisp")
      (progn
        (declare-function doxymacs-mode "doxymacs"  (&optional arg))
        (declare-function doxymacs-font-lock "doxymacs" nil)
        (autoload 'doxymacs-mode "doxymacs"
          "Minor mode for using/creating Doxygen documentation.
    To submit a problem report, request a feature or get support, please
    visit doxymacs' homepage at http://doxymacs.sourceforge.net/.
  
    To see what version of doxymacs you are running, enter
    `\\[doxymacs-version]'.
  
    In order for `doxymacs-lookup' to work you will need to customise the
    variable `doxymacs-doxygen-dirs'.
  
    Key bindings:
    \\{doxymacs-mode-map}" t)
        (autoload 'doxymacs-font-lock "doxymacs"
          "Turn on font-lock for Doxygen keywords.")
        (add-to-list 'load-path "/usr/local/share/emacs/site-lisp")
        (add-hook 'c-mode-common-hook 'doxymacs-mode)
        (defun my-doxymacs-font-lock-hook ()
          (if (or (eq major-mode 'c-mode) (eq major-mode 'c++-mode))
              (doxymacs-font-lock)))
        (add-hook 'font-lock-mode-hook 'my-doxymacs-font-lock-hook)))
#+end_src

* Old Carbon URL Processing

I use to compile Emacs with [[https://bitbucket.org/mituharu/emacs-mac/src/master/][Mitsuharu Yamamoto]] Carbon modifications.
This would then allow Emacs to receive Apple Events which I used to
capture URLs generated by [[https://github.com/indirect/rails-footnotes][rails-footnotes]].

This past week in fact, I have submitted three pull-requests / feature
requests to impliment the same concept in the existing Cocoa
(a.k.a. NextStep) framework.  I'll leave this here for historical
reference.

#+begin_src emacs-lisp :tangle no
  (require 'url)

  (if (and
       (fboundp 'mac-event-ae)
       (fboundp 'mac-ae-text)
       (fboundp 'mac-resume-apple-event))
      (defun mac-ae-get-url (event)
        "Open the URL specified by the Apple event EVENT.
    Currently the `mailto' and `txmt' schemes are supported."
        (interactive "e")
        (let* ((ae (mac-event-ae event))
               (the-text (mac-ae-text ae))
               (parsed-url (url-generic-parse-url the-text))
               (the-url-type (url-type parsed-url)))
          (cl-case (intern the-url-type)
            (mailto
             (progn
               (url-mailto parsed-url)
               (select-frame-set-input-focus (selected-frame))))
            (txmt
             (let* ((not-used (string-match "txmt://open\\?url=file://\\([^&]*\\)\\(&line=\\([0-9]*\\)\\)?" the-text))
                    (file-name (match-string 1 the-text))
                    (lineno (match-string 3 the-text)))
               (if (null file-name)
                   (message "Bad txmt URL: %s" the-text)
                 (find-file file-name)
                 (goto-char (point-min))
                 (if lineno
                     (forward-line (1- (string-to-number lineno))))
                 (select-frame-set-input-focus (selected-frame)))))
            (t (mac-resume-apple-event ae t)))))
    )
#+end_src

#+begin_src emacs-lisp

  (defun rgrep-exclude-log-files ()
    "Add *.log to `grep-find-ignored-files'"
    (interactive)
    (add-to-list 'grep-find-ignored-files "*.log"))

  (defun rgrep-include-log-files ()
    "Remove *.log from `grep-find-ignored-files'"
    (interactive)
    (setq grep-find-ignored-files (delete "*.log" grep-find-ignored-files)))

  (defun rgrep-exclude-molecule-files ()
    "Add \"molecule\" to `grep-find-ignored-directories'"
    (interactive)
    (add-to-list 'grep-find-ignored-directories "molecule"))

  (defun rgrep-include-molecule-files ()
    "Remove \"molecule\" from `grep-find-ignored-directories'"
    (interactive)
    (setq grep-find-ignored-directories (remove "molecule" grep-find-ignored-directories)))

  (defun rgrep-exclude-node_modules-files ()
    "Add \"node_modules\" to `grep-find-ignored-directories'"
    (interactive)
    (add-to-list 'grep-find-ignored-directories "node_modules"))

  (defun rgrep-include-node_modules-files ()
    "Remove \"node_modules\" from `grep-find-ignored-directories'"
    (interactive)
    (setq grep-find-ignored-directories (remove "node_modules" grep-find-ignored-directories)))

  (defun rgrep-exclude-cache-files ()
    "Add \"cache\" to `grep-find-ignored-directories'"
    (interactive)
    (add-to-list 'grep-find-ignored-directories "cache"))

  (defun rgrep-include-cache-files ()
    "Remove \"cache\" from `grep-find-ignored-directories'"
    (interactive)
    (setq grep-find-ignored-directories (remove "cache" grep-find-ignored-directories)))

  

  (defun unfill ()
    "Does the opposite of fill.  Lines separated with a single new line
    are joined with a single space."
    (interactive)
    (replace-regexp "\\(.\\)\n\\(.\\)" "\\1 \\2"))

  ;;; Set Mac type default
  (global-set-key "\M-`" 'other-frame)

  

  (defun magit-repolist-column-url (_id)
    (let* ((map (make-sparse-keymap))
           (branch (magit-get-current-branch))
           (remote (magit-get "branch" branch "remote"))
           (fork (magit-get-push-remote branch))
           temp1 temp2 temp3 temp4 url)
      (if (null (or fork remote))
          "------"
        (setq temp1 (magit-get "remote" (or fork remote) "url")
              temp2 (replace-regexp-in-string ":" "/" temp1)
              temp3 (replace-regexp-in-string "git@" "https://" temp2)
              temp4 (replace-regexp-in-string "\\.git" "" temp3)
              url (format "%s/tree/%s" temp4 branch))
        (define-key map (kbd "<mouse-2>")
          `(lambda ()
             (interactive)
             (browse-url ,url)))
        (propertize "url =>"
                    'mouse-face 'highlight
                    'help-echo (format "visit %s" url)
                    'keymap map))))

  (defun zsh-manpage-search-regexp (string &optional lax)
    "Returns a string to search for entries in the zshall man page"
    (format "\n[A-Z ]*\n \\{7\\}%s%s" string (if lax "" "\\_>")))

  (isearch-define-mode-toggle zsh-manpage "z" zsh-manpage-search-regexp "\
  Searching zshall man page for where a concept is described")
  
  ;;;
  ;;; Use to be part of x-stuff.el but I just removed the file and put
  ;;; what was useful here.
  ;;;

  (defvar favorite-colors (list "DarkSlateGray1"
                                "LavenderBlush2"
                                "LightBlue1"
                                "LightCyan2"
                                "LightSteelBlue1"
                                "LightYellow2"
                                "SlateGray1"
                                "bisque"
                                "bisque1"
                                "cornsilk2"
                                "gray90"
                                "honeydew2"
                                "seashell2"
                                "thistle2"
                                "wheat1")
    "List of my favorite background colors")

  (defun pick-random-color ()
    "Picks a random color from favorite-colors"
    (nth (random (length favorite-colors)) favorite-colors))
  
  ;; Lua mode
  (defun add-lua-align-list ()
    "Adds patterns to `align-rules-list'"
    (add-to-list 'align-rules-list
               '(lua-eq
                 (regexp . "\\(\\s-*\\)=")
                 (modes . '(lua-mode)))))

  (add-hook 'align-load-hook 'add-lua-align-list)

  
  (add-hook 'org-mode-hook #'org-clock-auto-clockout-insinuate)

  
  ;; Tramp settings.  These are currently just for Docker while
  ;; developing Hatred.  It would be nice to have them within the
  ;; container somehow.
  ;; 
  ;; Note that customize.el also sets
  ;; tramp-remote-path to '(tramp-own-remote-path))
  (add-to-list 'tramp-connection-properties
               (list (regexp-quote "/docker:hatred-web-1:")
                     "remote-shell" "/usr/bin/zsh"))

  

  
  ;; (eval-when-compile (add-to-list 'load-path (expand-file-name ".")))
  (require 'helm-setup)
  (require 'projectile-setup)
  (require 'ruby-setup)
  (require 'resize)
  (provide 'pedz)
#+end_src
